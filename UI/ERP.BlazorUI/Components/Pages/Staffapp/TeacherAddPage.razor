@page "/addTeacher"
@using ERP.Application.StaffApp.Interfaces.UsersManagement
@using ERP.Domain.Core.Entity
@using FluentValidation
@using Microsoft.AspNetCore.Components.Forms
@using System.IO



@inject IAddTeacherUseCase AddTeacherUseCase
@inject ISnackbar Snackbar

<style>
    h2 {
        text-align: center;
        font-weight: bold;
        text-decoration: underline;
    }

  
</style>

<h2><c>ADD A NEW TEACHER</c></h2>

<MudCard Class="my-custom-card" >


    <h5><c>ADD TEACHERS FROM EXCEL</c></h5>
    <InputFile @ref="fileInput" OnChange="HandleFileUpload" />
    @if (teachers != null && teachers.Any())
    {
        <button class="btn btn-primary" @onclick="SaveAllTeachers">Save All Teachers</button>
    }



    <MudForm Model="@model" @ref="@form">
        <MudCardContent>
            <MudTextField @bind-Value="model.TeacherId"
                          Immediate="true"
                          Label="Teacher ID" />
            <MudTextField @bind-Value="model.FirstName"
                          Immediate="true"
                          Label="First Name" />

            <MudTextField @bind-Value="model.LastName"
                          Immediate="true"
                          Label="Last Name" />
            <MudTextField @bind-Value="model.Department"
                          Immediate="true"
                          Label="Department" />
            <MudTextField @bind-Value="model.Email"
                          Immediate="true"
                          Label="Email" />

            <MudTextField @bind-Value="model.Phone"
                          Immediate="true"
                          Label="Phone" />

            <MudTextField @bind-Value="model.Address1"
                          Immediate="true"
                          Label="Assress01" />

            <MudTextField @bind-Value="model.Address2"
                          Immediate="true"
                          Label="Address02" />

            <MudTextField @bind-Value="model.City"
                          Immediate="true"
                          Label="City" />

            <MudTextField @bind-Value="model.District"
                          Immediate="true"
                          Label="District" />

            <MudTextField @bind-Value="model.PhoneNumber"
                          Immediate="true"
                          Label="Mobile NB" />

            <MudTextField @bind-Value="model.NationalID"
                          Immediate="true"
                          Label="National ID" />

            <MudTextField @bind-Value="model.modules"
                          Immediate="true"
                          Label="Modules" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="ml-auto"
                   OnClick="@(async () => await Submit())">Add</MudButton>
    </MudCardActions>
</MudCard>



<style>
    .my-custom-card {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ced4da; /* Gray border */
    }
</style>


<h2><c>ADD TEACHERS FROM EXCEL</c></h2>
<InputFile @ref="fileInput" OnChange="HandleFileUpload" />

@* @if (uploadError != null)
{
    <p>@uploadError</p>
} *@

@* @if (successMessage != null)
{
    <p>@successMessage</p>
} *@

@if (teachers != null && teachers.Any())
{
    <button class="btn btn-primary" @onclick="SaveAllTeachers">Save All Teachers</button>
}


@code {
    // start

    private string successMessage;
    private string errorMessage;
    private InputFile fileInput;
    private string uploadError;
    private List<Teacher> teachers;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            try
            {
                teachers = await ReadTeachersFromExcel(file);
                
               
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error uploading file: {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }

    private async Task<List<Teacher>> ReadTeachersFromExcel(IBrowserFile file)
    {
        var teachers = new List<Teacher>();

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            // Load the Excel package using EPPlus
            using (var package = new OfficeOpenXml.ExcelPackage(memoryStream))
            {
                var worksheet = package.Workbook.Worksheets.FirstOrDefault();

                if (worksheet != null)
                {
                    for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                    {
                        var model = new Teacher
                            {
                                TeacherId = Convert.ToInt32(worksheet.Cells[row, 1].Value),
                                FirstName = worksheet.Cells[row, 2].Value?.ToString(),
                                LastName = worksheet.Cells[row, 3].Value?.ToString(),
                                Department = worksheet.Cells[row, 4].Value?.ToString(),
                                Email = worksheet.Cells[row, 5].Value?.ToString(),
                                Phone = worksheet.Cells[row, 6].Value?.ToString(),
                                Address1 = worksheet.Cells[row, 7].Value?.ToString(),
                                Address2 = worksheet.Cells[row, 8].Value?.ToString(),
                                City = worksheet.Cells[row, 9].Value?.ToString(),
                                District = worksheet.Cells[row, 10].Value?.ToString(),
                                PhoneNumber = worksheet.Cells[row, 11].Value?.ToString(),
                                NationalID = worksheet.Cells[row, 12].Value?.ToString(),
                                //modules = ParseModules(worksheet.Cells[row, 13].Value?.ToString())
                            };

                        teachers.Add(model);
                    }
                }
            }
        }

        return teachers;
    }

    private async Task SaveAllTeachers()
    {
        

        if (teachers != null && teachers.Any())
        {
            bool allTeachersSaved = true;

            foreach (var teacher in teachers)
            {
                try
                {
                    await AddTeacherUseCase.ExecuteAsync(teacher);
                    
                }
                catch (Exception ex)
                {
                    allTeachersSaved = false;
                    Snackbar.Add($"Error saving teacher: {ex.Message}", MudBlazor.Severity.Error);
                }
            }

            if (allTeachersSaved)
            {
                Snackbar.Add("All teachers saved successfully", MudBlazor.Severity.Success);
            }


            StateHasChanged(); // Update the UI
        }
    }

    private ICollection<NewModule> ParseModules(string modulesData)
    {
        if (string.IsNullOrEmpty(modulesData))
            return new List<NewModule>();

        // Assuming modules are separated by comma
        var modulesArray = modulesData.Split(',');

        var modules = new List<NewModule>();

        foreach (var module in modulesArray)
        {
            // Create a new instance of NewModule for each module
            modules.Add(new NewModule { ModuleName = module.Trim() });
        }

        return modules;
    }



    // over

    private Teacher model = new Teacher();
    private MudForm form;
   

    private async Task Submit()
    {
        await AddTeacherUseCase.ExecuteAsync(model);
     
    }
}
