@page "/resourceList"

@using ERP.Application.StaffApp.Interfaces.ResourceManagement
@using ERP.Domain.Core.Entity
@using FluentValidation

@inject NavigationManager NavigationManager
@inject IViewResourceByNameUseCase ViewResourceByNameUseCase
@inject IDeleteResourceUseCase DeleteResourceUseCase
@inject IDialogService DialogService

<div class="header-container">
    <h2><u>RESOURCES LIST</u></h2>
</div>

<MudTable Items="@_resources" Class="custom-table">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.ResourceId</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Action">
            <MudFab OnClick="@(() => EditResource(@context))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
            <MudFab OnClick="@(() => DeleteResource(@context))" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            <MudFab OnClick="@(() => ViewResource(@context))" Color="Color.Success" StartIcon="@Icons.Material.Outlined.PermIdentity" Size="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<style>
    .header-container {
        text-align: center;
        margin-bottom: 20px;
    }

    .custom-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .custom-table th, .custom-table td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        .custom-table th {
            background-color: #4CAF50;
            color: white;
            font-size: large;
            font-weight: 600;
            font-family: Arial, sans-serif;
        }

        .custom-table td {
            background-color: #f2f2f2;
            color: #333;
        }
</style>

@code {
    private List<Resource> _resources = new List<Resource>();

    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadResources();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadResources();
    }

    private async Task LoadResources()
    {
        _resources = (await ViewResourceByNameUseCase.ExecuteAsync(SearchTerm)).ToList();
    }

    private async Task DeleteResource(Resource resource)
    {
        await DeleteResourceUseCase.ExecuteAsync(resource);
        await LoadResources();
    }

    async Task EditResource(Resource resource)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(EditResourceDialog.resource), resource);

        var dialog = await DialogService.ShowAsync<EditResourceDialog>("Edit Resource", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadResources();
        }
    }

    async Task ViewResource(Resource resource)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ViewResourceDialog.resource), resource);

        var dialog = await DialogService.ShowAsync<ViewResourceDialog>("View Resource", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadResources();
        }
    }
}
