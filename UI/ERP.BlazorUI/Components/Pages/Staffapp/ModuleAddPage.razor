@page "/addModule"
@using ERP.Application.StaffApp.Interfaces
@using ERP.Domain.Core.Entity
@using FluentValidation
@inject IAddModuleUseCase AddModuleUseCase

<style>
    h2 {
        text-align: center;
        font-weight: bold;
        text-decoration: underline;
    }

  
</style>

<h2><c>ADD A NEW MODULE</c></h2>

<MudCard Class="my-custom-card" >
    <MudForm Model="@model" @ref="@form">
        <MudCardContent>
            <MudTextField @bind-Value="model.ModuleId"
                          Immediate="true"
                          Label="Module ID" />
            <MudTextField @bind-Value="model.ModuleCode"
                          Immediate="true"
                          Label="Module Code" />            
            <MudTextField @bind-Value="model.ModuleName"
                          Immediate="true"
                          Label="Module Name" />
            <MudTextField @bind-Value="model.Department"
                          Immediate="true"
                          Label="Department" />
            
            <MudTextField @bind-Value="model.semester"
                          Immediate="true"
                          Label="Lecture Hours" />
                          
            <MudTextField @bind-Value="model.Credit"
                          Immediate="true"
                          Label="Credit" />
            <MudTextField @bind-Value="model.teacherId"
                          Immediate="true"
                          Label="Teacher ID" />

            
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="ml-auto"
                   OnClick="@(async () => await Submit())">Add</MudButton>
    </MudCardActions>
</MudCard>



<style>
    .my-custom-card {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ced4da; /* Gray border */
    }
</style>
@code {
    private NewModule model = new NewModule();

    //private Student model = new Student();


    MudForm form;

   

    private async Task Submit()
    {


       await AddModuleUseCase.ExecuteAsync(model);
        
    }



    
}

@* @using ERP.Application.StudentApp.Students.Interfaces
@using ERP.Domain.Core.Entity
@using FluentValidation
@inject IEditStudentUseCase EditStudentUseCase
@inject IViewStudentById ViewStudentById




<MudCard>
    <MudForm Model="@model" @ref="@form" Validation="@(studentValidator.ValidateValue)"
             ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.FirstName"
                          For="@(() => model.FirstName)"
                          Immediate="true"
                          Label="FirstName" />

            <MudTextField @bind-Value="model.LastName"
                          For="@(() => model.LastName)"
                          Immediate="true"
                          Label="LastName" />
            <MudTextField @bind-Value="model.RegistrationNum"
                          For="@(() => model.RegistrationNum)"
                          Immediate="true"
                          Label="Registration Number" />

            <MudTextField @bind-Value="model.Email"
                          For="@(() => model.Email)"
                          Immediate="true"
                          Label="Email" />

            <MudTextField @bind-Value="model.Address1"
                          For="@(() => model.Address1)"
                          Immediate="true"
                          Label="Address" />

            <MudTextField @bind-Value="model.Phone"
                          For="@(() => model.Phone)"
                          Immediate="true"
                          Label="Phone" />


        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="ml-auto"
                   OnClick="@(async () => await Submit())">Update</MudButton>
    </MudCardActions>
</MudCard>



@code {
    private Student model;



    [Parameter]
    public int StudentId { get; set; }

    StudentModelValidator studentValidator = new StudentModelValidator();
    MudForm form;

    public class StudentModelValidator : AbstractValidator<Student>
    {
        public StudentModelValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.LastName)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));


            RuleFor(x => x.Address1)
                .NotEmpty()
                .Length(1, 100);


        }

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Student>
                                .CreateWithOptions((Student)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }



    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await EditStudentUseCase.ExecuteAsync(model);

        }


    }



    protected override async Task OnInitializedAsync()
    {
        model = await ViewStudentById.ExecuteAsync(StudentId);
    }
}
 *@