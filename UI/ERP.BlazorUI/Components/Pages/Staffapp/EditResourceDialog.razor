@using ERP.Application.StaffApp.Interfaces.ResourceManagement
@using ERP.Domain.Core.Entity
@using Microsoft.AspNetCore.Components.Web

@inject ISnackbar Snackbar
@inject IEditResourceUseCase EditResourceUseCase
@inject IDialogService DialogService
@inject IViewResourceByNameUseCase ViewResourceByNameUseCase

<MudDialogProvider />
<MudDialog Class="my-custom-dialog">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Edit Resource
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@resource.ResourceId" Label="Resource ID" ReadOnly="true" />
        <MudTextField @bind-Value="@resource.Name" Label="Name" />
        <MudTextField @bind-Value="@resource.Type" Label="Type" />
        <MudTextField @bind-Value="@resource.Description" Label="Description" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveResource">Save</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .my-custom-dialog {
        max-width: 400px;
        margin: auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Resource resource { get; set; } = new();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void SaveResource()
    {
        await EditResourceUseCase.ExecuteAsync(resource);
        Snackbar.Add("Resource Edited Successfully", Severity.Success);
        MudDialog.Close(DialogResult.Ok(resource.ResourceId));
    }
}
